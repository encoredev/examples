// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package db

import (
	"context"
	"time"

	"encore.dev/types/uuid"
)

const insertMessage = `-- name: InsertMessage :one
INSERT INTO message (id, provider_id, channel_id, author_id, content, timestamp)
VALUES (gen_random_uuid (), $1, $2, $3, $4, $5)
ON CONFLICT (channel_id, author_id, content, timestamp) DO NOTHING
RETURNING id, provider_id, channel_id, author_id, content, timestamp, deleted
`

type InsertMessageParams struct {
	ProviderID string
	ChannelID  uuid.UUID
	AuthorID   uuid.UUID
	Content    string
	Timestamp  time.Time
}

func (q *Queries) InsertMessage(ctx context.Context, db DBTX, arg InsertMessageParams) (*Message, error) {
	row := db.QueryRowContext(ctx, insertMessage,
		arg.ProviderID,
		arg.ChannelID,
		arg.AuthorID,
		arg.Content,
		arg.Timestamp,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.Timestamp,
		&i.Deleted,
	)
	return &i, err
}

const latestBotMessageInChannel = `-- name: LatestBotMessageInChannel :one
SELECT m.id, m.provider_id, m.channel_id, m.author_id, m.content, m.timestamp, m.deleted FROM message m join "user" u on m.author_id = u.id WHERE m.channel_id = $1 AND u.bot_id IS NOT NULL
ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) LatestBotMessageInChannel(ctx context.Context, db DBTX, channelID uuid.UUID) (*Message, error) {
	row := db.QueryRowContext(ctx, latestBotMessageInChannel, channelID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.Timestamp,
		&i.Deleted,
	)
	return &i, err
}

const latestMessageInChannel = `-- name: LatestMessageInChannel :one
SELECT m.id, m.provider_id, m.channel_id, m.author_id, m.content, m.timestamp, m.deleted FROM message m WHERE m.channel_id = $1
ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) LatestMessageInChannel(ctx context.Context, db DBTX, channelID uuid.UUID) (*Message, error) {
	row := db.QueryRowContext(ctx, latestMessageInChannel, channelID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.Timestamp,
		&i.Deleted,
	)
	return &i, err
}

const listMessagesInChannel = `-- name: ListMessagesInChannel :many
SELECT id, provider_id, channel_id, author_id, content, timestamp, deleted FROM message m WHERE m.channel_id = $1 and timestamp > NOW() - interval '3 days' order by timestamp desc LIMIT 25
`

func (q *Queries) ListMessagesInChannel(ctx context.Context, db DBTX, channelID uuid.UUID) ([]*Message, error) {
	rows, err := db.QueryContext(ctx, listMessagesInChannel, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.ChannelID,
			&i.AuthorID,
			&i.Content,
			&i.Timestamp,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessagesInChannelAfter = `-- name: ListMessagesInChannelAfter :many
WITH targetTimestamp AS (
    SELECT timestamp FROM message m WHERE m.provider_id = $2
)
SELECT id, provider_id, channel_id, author_id, content, timestamp, deleted FROM message m WHERE m.channel_id = $1 and timestamp > (select timestamp from targetTimestamp) order by timestamp
`

type ListMessagesInChannelAfterParams struct {
	ChannelID  uuid.UUID
	ProviderID string
}

func (q *Queries) ListMessagesInChannelAfter(ctx context.Context, db DBTX, arg ListMessagesInChannelAfterParams) ([]*Message, error) {
	rows, err := db.QueryContext(ctx, listMessagesInChannelAfter, arg.ChannelID, arg.ProviderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.ChannelID,
			&i.AuthorID,
			&i.Content,
			&i.Timestamp,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
