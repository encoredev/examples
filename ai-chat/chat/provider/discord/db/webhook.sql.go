// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: webhook.sql

package db

import (
	"context"

	"encore.dev/types/uuid"
)

const deleteWebhook = `-- name: DeleteWebhook :one
UPDATE webhook SET deleted = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, provider_id, bot_id, channel, name, token, deleted
`

func (q *Queries) DeleteWebhook(ctx context.Context, db DBTX, id uuid.UUID) (*Webhook, error) {
	row := db.QueryRowContext(ctx, deleteWebhook, id)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.BotID,
		&i.Channel,
		&i.Name,
		&i.Token,
		&i.Deleted,
	)
	return &i, err
}

const getWebhookByID = `-- name: GetWebhookByID :one
SELECT id, provider_id, bot_id, channel, name, token, deleted FROM webhook WHERE provider_id=$1 and deleted IS NULL
`

func (q *Queries) GetWebhookByID(ctx context.Context, db DBTX, providerID string) (*Webhook, error) {
	row := db.QueryRowContext(ctx, getWebhookByID, providerID)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.BotID,
		&i.Channel,
		&i.Name,
		&i.Token,
		&i.Deleted,
	)
	return &i, err
}

const getWebhookForBot = `-- name: GetWebhookForBot :one
SELECT id, provider_id, bot_id, channel, name, token, deleted FROM webhook WHERE channel = $1 AND bot_id = $2 and deleted IS NULL
`

type GetWebhookForBotParams struct {
	Channel string
	BotID   uuid.UUID
}

func (q *Queries) GetWebhookForBot(ctx context.Context, db DBTX, arg GetWebhookForBotParams) (*Webhook, error) {
	row := db.QueryRowContext(ctx, getWebhookForBot, arg.Channel, arg.BotID)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.BotID,
		&i.Channel,
		&i.Name,
		&i.Token,
		&i.Deleted,
	)
	return &i, err
}

const insertWebhook = `-- name: InsertWebhook :one
INSERT INTO webhook (provider_id, channel, name, token, bot_id) VALUES ($1, $2, $3, $4, $5) ON CONFLICT (id) DO UPDATE SET token = $4
RETURNING id, provider_id, bot_id, channel, name, token, deleted
`

type InsertWebhookParams struct {
	ProviderID string
	Channel    string
	Name       string
	Token      string
	BotID      uuid.UUID
}

func (q *Queries) InsertWebhook(ctx context.Context, db DBTX, arg InsertWebhookParams) (*Webhook, error) {
	row := db.QueryRowContext(ctx, insertWebhook,
		arg.ProviderID,
		arg.Channel,
		arg.Name,
		arg.Token,
		arg.BotID,
	)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.BotID,
		&i.Channel,
		&i.Name,
		&i.Token,
		&i.Deleted,
	)
	return &i, err
}
