// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: bot.sql

package db

import (
	"context"

	"encore.dev/types/uuid"
	"github.com/lib/pq"
)

const deleteBot = `-- name: DeleteBot :one
UPDATE bot SET deleted = NOW() WHERE id = $1 RETURNING id, name, prompt, profile, provider, deleted
`

func (q *Queries) DeleteBot(ctx context.Context, db DBTX, id uuid.UUID) (*Bot, error) {
	row := db.QueryRowContext(ctx, deleteBot, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Prompt,
		&i.Profile,
		&i.Provider,
		&i.Deleted,
	)
	return &i, err
}

const getBot = `-- name: GetBot :one
SELECT id, name, prompt, profile, provider, deleted FROM bot WHERE id = $1 AND deleted IS NULL
`

func (q *Queries) GetBot(ctx context.Context, db DBTX, id uuid.UUID) (*Bot, error) {
	row := db.QueryRowContext(ctx, getBot, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Prompt,
		&i.Profile,
		&i.Provider,
		&i.Deleted,
	)
	return &i, err
}

const getBotByName = `-- name: GetBotByName :one
SELECT id, name, prompt, profile, provider, deleted FROM bot WHERE name = $1 AND deleted IS NULL
`

func (q *Queries) GetBotByName(ctx context.Context, db DBTX, name string) (*Bot, error) {
	row := db.QueryRowContext(ctx, getBotByName, name)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Prompt,
		&i.Profile,
		&i.Provider,
		&i.Deleted,
	)
	return &i, err
}

const getBots = `-- name: GetBots :many
SELECT id, name, prompt, profile, provider, deleted FROM bot WHERE id = ANY($1::uuid[]) AND deleted IS NULL
`

func (q *Queries) GetBots(ctx context.Context, db DBTX, ids []uuid.UUID) ([]*Bot, error) {
	rows, err := db.QueryContext(ctx, getBots, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Bot{}
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Prompt,
			&i.Profile,
			&i.Provider,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBot = `-- name: InsertBot :one
INSERT INTO bot (id, name, prompt, profile, provider) VALUES (gen_random_uuid(), $1, $2, $3, $4) RETURNING id, name, prompt, profile, provider, deleted
`

type InsertBotParams struct {
	Name     string
	Prompt   string
	Profile  string
	Provider string
}

func (q *Queries) InsertBot(ctx context.Context, db DBTX, arg InsertBotParams) (*Bot, error) {
	row := db.QueryRowContext(ctx, insertBot,
		arg.Name,
		arg.Prompt,
		arg.Profile,
		arg.Provider,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Prompt,
		&i.Profile,
		&i.Provider,
		&i.Deleted,
	)
	return &i, err
}

const listBot = `-- name: ListBot :many
SELECT id, name, prompt, profile, provider, deleted FROM bot WHERE deleted IS NULL
`

func (q *Queries) ListBot(ctx context.Context, db DBTX) ([]*Bot, error) {
	rows, err := db.QueryContext(ctx, listBot)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Bot{}
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Prompt,
			&i.Profile,
			&i.Provider,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
